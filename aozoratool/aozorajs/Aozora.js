#title = "青空文庫タグ付与"

// -----------------------------------------------------------------------------
// Aozora.js
//
// 青空文庫のタグをつけるためのマクロ
//
// 文字が「未選択」「行内選択」「複数行選択」それぞれに適した
// 青空文庫用文書整形メニューを表示します．
//
// メニュー定義は簡単に編集できます．
// 書式はコメントまたは既存定義を参照下さい．
// ショートカットキー定義のないメニューは上から順に 1～9 および 0 が割当てられます．
// ショートカットキーを定義したくないメニューは，文字列最後に & を付けて下さい．
//
// (C) ks, および有志の皆さん
// -----------------------------------------------------------------------------

// *****************************************************************************
// オプション定義

// 入力済みのルビ情報を利用する
// 規模の大きい文書で処理速度が気になる場合は false にして下さい．
var USE_PUT_RUBY = true;

// *****************************************************************************

// タグ処理定義
// ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓

// 選択時の処理
var f = [
	// "表示名", [	でグループ化
	"ページや段", [
		// "表示名", $("%s") で文字列置き換え．%s が選択文字列
		// タグを除外する場合は %~s を指定．
		"大見出し", [
			"挟み込み",		$("［＃大見出し］%s［＃大見出し終わり］"),
			"後置",			$("%s［＃「%~s」は大見出し］" ),
			"同行挟み込み",	$("［＃同行大見出し］%s［＃同行大見出し終わり］"),
			"同行後置",		$("［＃「%~s」は同行大見出し］"),
			"窓挟み込み",	$("［＃窓大見出し］%s［＃窓大見出し終わり］"),
			"窓後置",		$("［＃「%~s」は窓大見出し］"),
		],
		"中見出し", [
			"挟み込み",		$("［＃中見出し］%s［＃中見出し終わり］"),
			"後置", 		$("%s［＃「%~s」は中見出し］" ),
			"同行挟み込み",	$("［＃同行中見出し］%s［＃同行中見出し終わり］"),
			"同行後置",		$("［＃「%~s」は同行中見出し］"),
			"窓挟み込み",	$("［＃窓中見出し］%s［＃窓中見出し終わり］"),
			"窓後置",		$("［＃「%~s」は窓中見出し］"),
		],
		"小見出し", [
			"挟み込み",		$("［＃小見出し］%s［＃小見出し終わり］"),
			"後置", 		$("%s［＃「%~s」は小見出し］" ),
			"同行挟み込み",	$("［＃同行小見出し］%s［＃同行小見出し終わり］"),
			"同行後置",		$("［＃「%~s」は同行小見出し］"),
			"窓挟み込み",	$("［＃窓小見出し］%s［＃窓小見出し終わり］"),
			"窓後置",		$("［＃「%~s」は窓小見出し］"),
		],	// グループ終わり．「,」を忘れないように
	],
	// 単純な置き換え，挿入でない場合は function(s){ return "" } の形式で記述
	"ルビ\t(&R)", 			function(s){ var i=Prompt(s+" のルビ", GetDefaultRubyInput(s)); return !i ? s : (NeedSeparatorForRuby() ? "｜" : "") + s + "《" + i + "》" },
	"再読ルビ\t(&A)",		function(s){ var i=Prompt(s+" のルビ", GetDefaultRubyInput(s)); return !i ? s : s + "［＃「" + s.replace(/"/g, '\"').replace(/\n/mg, "\\n") + "」の左に「" + i.ToKatakana() + "」のルビ］" },
	"強調\t(&S)", [
		"傍点", [
			"挟み込み",		$("［＃傍点］%s［＃傍点終わり］"),
			"後置",			$("%s［＃「%~s」に傍点］"),
			"左に挟み込み",	$("［＃左に傍点］%s［＃左に傍点終わり］"),
			"左に後置",		$("%s［＃「%~s」の左に傍点］"),
		],
		"白ゴマ傍点", [
			"挟み込み",		$("［＃白ゴマ傍点］%s［＃白ゴマ傍点終わり］"),
			"後置",			$("%s［＃「%~s」に白ゴマ傍点］"),
			"左に挟み込み",	$("［＃左に白ゴマ傍点］%s［＃左に白ゴマ傍点終わり］"),
			"左に後置",		$("%s［＃「%~s」の左に白ゴマ傍点］"),
		],
		"丸傍点", [
			"挟み込み",		$("［＃丸傍点］%s［＃丸傍点終わり］"),
			"後置",			$("%s［＃「%~s」に丸傍点］"),
			"左に挟み込み",	$("［＃左に丸傍点］%s［＃左に丸傍点終わり］"),
			"左に後置",		$("%s［＃「%~s」の左に丸傍点］"),
		],
		"白丸傍点", [
			"挟み込み",		$("［＃白丸傍点］%s［＃白丸傍点終わり］"),
			"後置",			$("%s［＃「%~s」に白丸傍点］"),
			"左に挟み込み",	$("［＃左に白丸傍点］%s［＃左に白丸傍点終わり］"),
			"左に後置",		$("%s［＃「%~s」の左に白丸傍点］"),
		],
		"黒三角傍点", [
			"挟み込み",		$("［＃黒三角傍点］%s［＃黒三角傍点終わり］"),
			"後置",			$("%s［＃「%~s」に黒三角傍点］"),
			"左に挟み込み",	$("［＃左に黒三角傍点］%s［＃左に黒三角傍点終わり］"),
			"左に後置",		$("%s［＃「%~s」の左に黒三角傍点］"),
		],
		"白三角傍点", [
			"挟み込み",		$("［＃白三角傍点］%s［＃白三角傍点終わり］"),
			"後置",			$("%s［＃「%~s」に白三角傍点］"),
			"左に挟み込み",	$("［＃左に白三角傍点］%s［＃左に白三角傍点終わり］"),
			"左に後置",		$("%s［＃「%~s」の左に白三角傍点］"),
		],
		"二重丸傍点", [
			"挟み込み",		$("［＃二重丸傍点］%s［＃二重丸傍点終わり］"),
			"後置",			$("%s［＃「%~s」に二重丸傍点］"),
			"左に挟み込み",	$("［＃左に二重丸傍点］%s［＃左に二重丸傍点終わり］"),
			"左に後置",		$("%s［＃「%~s」の左に二重丸傍点］"),
		],
		"蛇の目傍点", [
			"挟み込み",		$("［＃蛇の目傍点］%s［＃蛇の目傍点終わり］"),
			"後置",			$("%s［＃「%~s」に蛇の目傍点］"),
			"左に挟み込み",	$("［＃左に蛇の目傍点］%s［＃左に蛇の目傍点終わり］"),
			"左に後置",		$("%s［＃「%~s」の左に蛇の目傍点］"),
		],
		"ばつ傍点", [
			"挟み込み",		$("［＃ばつ傍点］%s［＃ばつ傍点終わり］"),
			"後置",			$("%s［＃「%~s」にばつ傍点］"),
			"左に挟み込み",	$("［＃左にばつ傍点］%s［＃左にばつ傍点終わり］"),
			"左に後置",		$("%s［＃「%~s」の左にばつ傍点］"),
		],
	],
	"傍線\t(&L)", [
		"傍線", [
			"挟み込み",		$("［＃傍線］%s［＃傍線終わり］"),
			"後置",			$("%s［＃「%~s」に傍線］"),
			"左に挟み込み",	$("［＃左に傍線］%s［＃左に傍線終わり］"),
			"左に後置",		$("%s［＃「%~s」の左に傍線］"),
		],
		"二重傍線", [
			"挟み込み",		$("［＃二重傍線］%s［＃二重傍線終わり］"),
			"後置",			$("%s［＃「%~s」に二重傍線］"),
			"左に挟み込み",	$("［＃左に二重傍線］%s［＃左に二重傍線終わり］"),
			"左に後置",		$("%s［＃「%~s」の左に二重傍線］"),
		],
		"鎖線", [
			"挟み込み",		$("［＃鎖線］%s［＃鎖線終わり］"),
			"後置",			$("%s［＃「%~s」に鎖線］"),
			"左に挟み込み",	$("［＃左に鎖線］%s［＃左に鎖線終わり］"),
			"左に後置",		$("%s［＃「%~s」の左に鎖線］"),
		],
		"破線", [
			"挟み込み",		$("［＃破線］%s［＃破線終わり］"),
			"後置",			$("%s［＃「%~s」に破線］"),
			"左に挟み込み",	$("［＃左に破線］%s［＃左に破線終わり］"),
			"左に後置",		$("%s［＃「%~s」の左に破線］"),
		],
		"波線", [
			"挟み込み",		$("［＃波線］%s［＃波線終わり］"),
			"後置",			$("%s［＃「%~s」に波線］"),
			"左に挟み込み",	$("［＃左に波線］%s［＃左に波線終わり］"),
			"左に後置",		$("%s［＃「%~s」の左に波線］"),
		],
	],
	"字体", [
		"太字", [
			"挟み込み",		$("［＃太字］%s［＃太字終わり］"),
			"後置",			$("%s［＃「%~s」は太字］"),
		],
		"斜体", [
			"挟み込み",		$("［＃斜体］%s［＃斜体終わり］"),
			"後置",			$("%s［＃「%~s」は斜体］"),
		],
		"大きく", [
			"挟み込み",		List("［＃%d段階大きな文字］%s［＃大きな文字終わり］", "%d段階"),
			"後置",			List("%s［＃「%~s」は%d段階大きな文字］", "%d段階"),
		],
		"小さく", [
			"挟み込み",		List("［＃%d段階小さな文字］%s［＃小さな文字終わり］", "%d段階"),
			"後置",			List("%s［＃「%~s」は%d段階小さな文字］", "%d段階"),
		],
	],
	"縦中横",				$("%s［＃「%~s」は縦中横］"),
	"割り注",				$("［＃割り注］%s［＃割り注終わり］"),
	"行小書き", [
		"右小書き", [
			"挟み込み",		$("［＃行右小書き］%s［＃行右小書き終わり］"),
			"後置",			$("%s［＃「%~s」は行右小書き］"),
		],
		"左小書き", [
			"挟み込み",		$("［＃行左小書き］%s［＃行左小書き終わり］"),
			"後置",			$("%s［＃「%~s」は行左小書き］"),
		],
	],
	"上付き、下付き", [
		"上付き", [
			"挟み込み",		$("［＃上付き小文字］%s［＃上付き小文字終わり］"),
			"後置",			$("%s［＃「%~s」は上付き小文字］"),
		],
		"下付き", [
			"挟み込み",		$("［＃下付き小文字］%s［＃下付き小文字終わり］"),
			"後置",			$("%s［＃「%~s」は下付き小文字］"),
		],
	],
	"罫囲み",				$("［＃罫囲み］\n%s\n［＃罫囲み終わり］ "),
	"横組み", [
		"挟み込み",			$("［＃横組み］%s［＃横組み終わり］"),
		"後置",				$("%s［＃「%~s」は横組み］"),
	],
	"ページの左右中央",[
		"ページの左右中央",				$("［＃ページの左右中央］\n\n\n%s\n\n\n［＃改ページ］"),
		"ページの左右中央（右寄り）",	$("［＃ページの左右中央］\n\n%s\n\n\n\n［＃改ページ］"),
		"ページの左右中央（左寄り）",	$("［＃ページの左右中央］\n\n\n\n%s\n\n［＃改ページ］"),
	]
];

// 複数行選択時の処理
var ff = [
	"ページや段", [
		"大見出し",	$("［＃ここから大見出し］\n%s\n［＃ここで大見出し終わり］"),
		"中見出し",	$("［＃ここから中見出し］\n%s\n［＃ここで中見出し終わり］"),
		"小見出し",	$("［＃ここから小見出し］\n%s\n［＃ここで小見出し終わり］"),
	],
	// 関数でリスト生成．
	// %d に１～９が入る
	// %s が選択文字列
	// 2 番目の引数を指定すると，選択肢をそのテキストにする
	"字下げ",		List("［＃ここから%d字下げ］\n%s\n［＃ここで字下げ終わり］", "%d字下げ"),
	"字下げ折り返し", (function(){
		var N = "０１２３４５６７８９";
		var f = [];
		for (var i=1; i<=9 ;i++) {
			f.push("ここから" + i + "字下げ");
			var g = [];
			for (var j=1; j<=9; j++) {
				g.push("折り返して" + j + "字下げ");
				g.push(new Function('s', 'return "［＃ここから'+N.charAt(i)+'字下げ、折り返して'+N.charAt(j)+'字下げ］\\n" + s + "\\n［＃ここで字下げ終わり］"'));
			}
			f.push(g);
		}
		return f;
	})(),
	"字詰め",		List("［＃ここから%d字詰め］\n%s\n［＃ここで字詰め終わり］", "%d字詰め"),
	"改行天付き折り返し", List("［＃ここから改行天付き、折り返して%d字下げ］\n%s\n［＃ここで字下げ終わり］", "%d字下げ"),
	"地付き", 		$("［＃ここから地付き］\n%s\n［＃ここで地付き終わり］"),
	"地から上げ",	List("［＃ここから地から%d字上げ］\n%s\n［＃ここで字上げ終わり］", "%d字上げ"),
	"字体", [
		"太字",		$("［＃ここから太字］\n%s\n［＃ここで太字終わり］"),
		"斜体", 	$("［＃ここから斜体］\n%s\n［＃ここで斜体終わり］"),
		"大きく",	List("［＃ここから%d段階大きな文字］\n%s\n［＃ここで大きな文字終わり］", "%d段階"),
		"小さく",	List("［＃ここから%d段階小さな文字］\n%s\n［＃ここで小さな文字終わり］", "%d段階"),
	],
	"罫囲み",		$("［＃ここから罫囲み］\n%s\n［＃ここで罫囲み終わり］"),
	"横組み",		$("［＃ここから横組み］\n%s\n［＃ここで横組み終わり］"),
	"ページの左右中央\t(&C)",[
		"ページの左右中央",				$("［＃ページの左右中央］\n\n\n%s\n\n\n［＃改ページ］"),
		"ページの左右中央（右寄り）",	$("［＃ページの左右中央］\n\n%s\n\n\n\n［＃改ページ］"),
		"ページの左右中央（左寄り）",	$("［＃ページの左右中央］\n\n\n\n%s\n\n［＃改ページ］"),
	]
];

// 未選択時の処理
var g = [
	"ページや段", [
		"改丁",		$("［＃改丁］"),
		"改ページ",	$("［＃改ページ］"),
		"改見開き",	$("［＃改見開き］"),
		"改段",		$("［＃改段］"),
		"改行",		$("［＃改行］"),
		"本文終わり（番外）",		$("［本文終わり＃］"),
	],
	"字下げ",		List("［＃%d字下げ］", "%d字下げ"),
	"地付き",		$("［＃地付き］"),
	"地から上げ",	List("［＃地から%d字上げ］", "%d字上げ"),
	"外字",			$("※［＃「」］"),
	"訓点",			[
		"返り点",	[
			"レ",	$("［＃レ］"),
			"一",	$("［＃一］"),
			"二",	$("［＃二］"),
			"三",	$("［＃三］"),
			"上",	$("［＃上］"),
			"中",	$("［＃中］"),
			"下",	$("［＃下］"),
			"一レ",	$("［＃一レ］"),
			"上レ",	$("［＃上レ］"),
			"入力",	function(){ return "［＃" + ToKatakana(Prompt("返り点", "")) + "］" },
		],
		"送り仮名",	[
			"ノ",	$("［＃（ノ）］"),
			"ニ",	$("［＃（ニ）］"),
			"ヲ",	$("［＃（ヲ）］"),
			"入力",	function(){ return "［＃（" + ToKatakana(Prompt("送り仮名", "")) + "）］" },
		],
	],
	"予約文字", [
		"《",	$("※［＃始め二重山括弧、1-1-52］"),
		"》",	$("※［＃終わり二重山括弧、1-1-53］"),
		"［",	$("※［＃始め角括弧、1-1-46］"),
		"］",	$("※［＃終わり角括弧、1-1-47］"),
		"〔",	$("※［＃始めきっこう（亀甲）括弧、1-1-44］"),
		"〕",	$("※［＃終わりきっこう（亀甲）括弧、1-1-45］"),
		"｜",	$("※［＃縦線、1-1-35］"),
		"＃",	$("※［＃井げた、1-1-84］"),
		"※",	$("※［＃米印、1-2-8］"),
	],
	"画像", [
		"挿絵",	function(){
			var p = Prompt("ファイル名.(png,jpg,svg)", "");
			if (p) {
				var c = Prompt("キャプション", "");
				return "［＃" + (c ? ("「"+c+"」のキャプション付き") : "") + "の図（" + p +"）入る］";
			}
			return "";
		},
	],
];

// ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑

// １～９までを処理するリスト生成
// 引数は次のように展開される
// %d: １～９までが入る
// %s: 選択されている文字列
function List(a, b) {
	a = a.replace(/"/g, '\"').replace(/\n/mg, "\\n");
	var f = [];
	for (var i=0; i<9; i++) {
		if (b) {
			var d = b.split("%d");
			f.push(d[0] + (d.length >= 2 ? ("１２３４５６７８９".charAt(i) + d[1]) : ""));
		} else {
			f.push(String(i+1));
		}
		var r = a;
		var d = r.split("%d");
		r = d[0] + (d.length >= 2 ? ("１２３４５６７８９".charAt(i) + d[1]) : "");
		var s = r.split("%s");
		r = s[0] + (s.length >= 2 ? ('" + s + "' + s[1]) : "");
		var ss = r.split("%~s");
		r = ss[0] + (ss.length >= 2 ? ('" + RemoveTag(s) + "' + ss[1]) : "");
		f.push(new Function('s', 'return "' + r + '"'));
	}
	return f;
}

// タグを除去した pure なテキストを取得
function RemoveTag(text) {
	return text.replace(/《.*?》/g, "").replace(/［.*?］/g, "");
}

// 単純な置き換え文字列の定義
// %s が選択文字列
// %~s が選択文字列からタグを除いた pure な文字列
function $(a) {
	a = a.replace(/"/g, '\"').replace(/\n/mg, "\\n");
	var s = a.split("%s");
	a = s[0] + (s.length >= 2 ? ('" + s + "' + s[1]) : "");
	var ss = a.split("%~s");
	a = ss[0] + (ss.length >= 2 ? ('" + RemoveTag(s) + "' + ss[1]) : "");
	return new Function('s', 'return "' + a + '"');
}

// ひらがなをカタカナに変換
function ToKatakana(s) {
	return s.replace(/[ぁ-ん]/g, function(s) { return String.fromCharCode(s.charCodeAt(0) + 0x60) });
}

// 漢字を含むか
function HasKanji(s) {
	return s.search(/[〇ヵヶ〆一-龥]/) >= 0;
}

// ひらがなを含むか
function HasHiragana(s) {
	return s.search(/[ぁ-ん]/) >= 0;
}

// カタカナを含むか
function HasKatakana(s) {
	return s.search(/[ァ-ヴ]/) >= 0;
}

// 数字を含むか
function HasNumber(s) {
	return s.search(/[0-9０-９]/) >= 0;
}

// アルファベットを含むか
function HasAlphabet(s) {
	return s.search(/[a-zA-Zａ-ｚＡ-Ｚ]/) >= 0;
}

// 含んでいる文字種
function CountCharType(s) {
	return (HasKanji(s)?1:0) + (HasHiragana(s)?1:0) + (HasKatakana(s)?1:0) + (HasNumber(s)?1:0) + (HasAlphabet(s)?1:0);
}

// 選択中文字列のルビ付与でセパレータが必要になるか
function NeedSeparatorForRuby() {
	var sel = Document.Selection;
	var s = sel.Text;
	var needSeparator = CountCharType(s) >= 2;
	// 前の単語との区切りが明確かを判定
	if (!needSeparator) {
		var x = sel.GetTopPointX(mePosLogical);
		if (x > 1) {
			var ss = Document.GetLine(sel.GetTopPointY(mePosLogical), 0).substr(x-2,1) + s;
			needSeparator = CountCharType(ss) <= 1;
		}
	}
	// 2 単語以上のアルファベットかを判定
	needSeparator |= HasAlphabet(s) && s.replace(/^ +| +$/g, "").search(" ") >= 0;
	return needSeparator;
}

// 配列への配列追加
Array.prototype.Add = function(){
	for (var i=0; i<arguments.length; i++) {
		this.push(arguments[i]);
	}
	return this;
};

// 既存ルビの一覧を生成
var GetRubyMap = (function() {
	var Kanji = /[〇ヵヶ〆一-龥]+$/;
	var Hiragana = /[ぁ-ん]+$/;
	var Katakana = /[ァ-ヴ]+$/;
	var Suji = /[0-9０-９]+$/;
	var Alphabet = /[a-zA-Zａ-ｚＡ-Ｚ ]+$/;
	
	return function(text) {
		var r = {};
		text = text.replace(/｜.+?《.+?》/g, function(s) {
			var n = s.indexOf("《");
			r[s.substring(1, n)] = s.substring(n+1, s.length-1);
			return "";
		});
		var a = text.match(/[^》]+?《.+?》/g) || [];
		for (var i=0, len=a.length; i<len; i++) {
			var s = a[i];
			var idx = s.indexOf("《");
			var b = s.substring(0, idx);
			if (b.search(Kanji) >= 0 ||
				b.search(Hiragana) >= 0 ||
				b.search(Katakana) >= 0 ||
				b.search(Suji) >= 0 ||
				b.search(Alphabet) >= 0) {
					r[s.substring(RegExp.index, idx)] = s.substring(idx+1, s.length-1);
			}
		}
		return r;
	}
})();

// ルビの初期入力を取得
function GetDefaultRubyInput(s) {
	if (USE_PUT_RUBY) {
		return GetRubyMap(Document.Text)[s] || "";
	}
	return "";
}

// 基本機能
(function(){
	var sel = Document.Selection;
	// 未選択
	if (sel.IsEmpty) {
		f = g;
	}
	// 複数選択
	if (sel.Text.indexOf("\n") >= 0) {
		f= ff;
	}
 
	// 選択肢追加
	// 定義リストからメニューを作成
	var commands = {}, id = 1;
	var ListToMenu = function(menus, f) {
		var shortcut = 1;
		for (var i=0; i<f.length; i++) {
			// 区切り
			if (typeof f[i] == "string" && /^-+$/.test(f[i])) {
				menus.Add("", 0, meMenuSeparator);
			}
			else {
				if (typeof f[i] == "string" && f[i].indexOf("&") < 0 && shortcut <= 10) {
					f[i] += "\t(&" + ((shortcut++)%10) + ")";
				}
				// グループ処理
				if (i+1<f.length && typeof f[i] == "string" && f[i+1] instanceof Array) {
					var subMenus = CreatePopupMenu();
					menus.AddPopup(f[i], subMenus);
					ListToMenu(subMenus, f[i+1]);
					i++;
				}
				// 関数処理
				else if (i+1<f.length && typeof f[i] == "string" && typeof f[i+1] == "function") {
					menus.Add(f[i], id, 0);
					commands[id++] = f[i+1];
					i++;
				} else if (f[i] == null) {
					// Ignore
				} else {
					Alert("コマンド変換に失敗しました．");
					Quit();
				}
			}
		}
	};

	var topMenu = CreatePopupMenu();
	ListToMenu(topMenu, f);
 
	// ポップアップを表示して選択されたコマンドを実行
	var mePosCaret = 0;
	var select = topMenu.Track(0);
	if (select > 0) {
		sel.Text = commands[select](sel.Text);
	}
})();